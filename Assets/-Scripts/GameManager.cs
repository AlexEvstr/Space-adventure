using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

public class GameManager : MonoBehaviour
{
    [System.Serializable]
    public class PlayerData
    {
        public string playerName;
        public int spriteIndex;
        public PlayerPieceController controller;
        public bool hasFinished = false;
    }
    private PlayerData winner = null;
    public Image avatarImage; // –∫—É–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –∏–≥—Ä–æ–∫–∞
    public Text nameText;     // –∫—É–¥–∞ –≤—ã–≤–æ–¥–∏–º –∏–º—è –∏–≥—Ä–æ–∫–∞

    public Sprite[] playerSprites; // —Ç–µ –∂–µ, —á—Ç–æ –≤ –≤—ã–±–æ—Ä–µ
    [SerializeField] private GameObject[] playerPieces; // –ü—Ä–∏–≤—è–∑–∞–ª –≤—Ä—É—á–Ω—É—é
    private List<PlayerData> players = new List<PlayerData>();

    private int currentPlayerIndex = 0;
    [SerializeField] private Button throwButton;
    [SerializeField] private Sprite[] pieceSprites;   

    private void Start()
    {
        LoadPlayers();
    }


    private void LoadPlayers()
    {
        for (int i = 0; i < 4; i++)
        {
            string nameKey = $"PlayerName{i}";
            string spriteKey = $"PlayerSpriteIndex{i}";

            if (PlayerPrefs.HasKey(nameKey) && PlayerPrefs.HasKey(spriteKey))
            {
                string playerName = PlayerPrefs.GetString(nameKey);
                int spriteIndex = PlayerPrefs.GetInt(spriteKey);

                GameObject piece = playerPieces[i];
                piece.SetActive(true);
                var controller = piece.GetComponent<PlayerPieceController>();

                var img = piece.GetComponent<Image>(); // –µ—Å–ª–∏ UI
                if (img != null && spriteIndex >= 0 && spriteIndex < pieceSprites.Length)
                {
                    img.sprite = pieceSprites[spriteIndex];
                }

                players.Add(new PlayerData
                {
                    playerName = playerName,
                    spriteIndex = spriteIndex,
                    controller = controller
                });
            }
            else
            {
                playerPieces[i].SetActive(false);
            }
        }

        ShowCurrentPlayerUI();
    }

    public void OnDiceResult(int steps)
    {
        var current = players[currentPlayerIndex];

        // ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –¥–æ—à—ë–ª –¥–æ —Ñ–∏–Ω–∏—à–∞
        

        StartCoroutine(HandlePlayerMove(steps));
    }



    private IEnumerator HandlePlayerMove(int steps)
    {
        throwButton.interactable = false;

        var current = players[currentPlayerIndex];
        ShowCurrentPlayerUI();

        yield return current.controller.MoveStepByStepCoroutine(steps);

        currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
        ShowCurrentPlayerUI();

        throwButton.interactable = true;

        if (current.controller.CurrentTileIndex == current.controller.board.tiles.Count - 1 && !current.hasFinished)
        {
            CheckVictory(current);
        }

    }



    private void ShowCurrentPlayerUI()
    {
        var player = players[currentPlayerIndex];
        avatarImage.sprite = playerSprites[player.spriteIndex];
        nameText.text = player.playerName;
        if (player.hasFinished)
        {
            currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
            ShowCurrentPlayerUI();
        }
    }

    private void CheckVictory(PlayerData currentPlayer)
    {
        int victoryMode = PlayerPrefs.GetInt("VictoryConditions", 0);

        currentPlayer.hasFinished = true;

        if (victoryMode == 0)
        {
            // –ü–æ–±–µ–∂–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π, –∫—Ç–æ –¥–æ—à—ë–ª
            Debug.Log($"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {currentPlayer.playerName}");
            // –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã
            int gamesPlayed = PlayerPrefs.GetInt("GamesPlayed", 0);
            gamesPlayed++;
            PlayerPrefs.SetInt("GamesPlayed", gamesPlayed);
        }
        else if (victoryMode == 1)
        {
            // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º
            if (winner == null)
            {
                winner = currentPlayer;
            }

            // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ù–ï —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–∏
            int notFinished = players.Count(p => !p.hasFinished);

            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
            if (notFinished == 1)
            {
                Debug.Log($"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.playerName}");
                // –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é

                int gamesPlayed = PlayerPrefs.GetInt("GamesPlayed", 0);
                gamesPlayed++;
                PlayerPrefs.SetInt("GamesPlayed", gamesPlayed);
            }
        }
    }
}
